import dotenv from 'dotenv';
import { Client, GatewayIntentBits } from 'discord.js';
import schedule from 'node-schedule';
import express from 'express';
import axios from 'axios';

dotenv.config();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

const app = express();
const port = 3000;

// OAuth2 Ïù∏Ï¶ù ÏΩúÎ∞± Ï≤òÎ¶¨
app.get('/callback', async (req, res) => {
    const code = req.query.code;

    if (!code) {
        return res.send('No code provided');
    }

    try {
        const response = await axios.post('https://discord.com/api/oauth2/token', new URLSearchParams({
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            grant_type: 'authorization_code',
            code: code,
            redirect_uri: 'http://localhost:3000/callback',
        }), {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });

        const { access_token } = response.data;
        res.send('Authentication successful! You can close this window.');
        
        // Ïù¥Ï†ú access_tokenÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎîîÏä§ÏΩîÎìú APIÏôÄ ÏÉÅÌò∏ÏûëÏö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.

    } catch (error) {
        console.error('Error during authentication:', error);
        res.send('Authentication failed.');
    }
});

// ÏãúÏûë ÎÇ†Ïßú ÏÑ§Ï†ï (8Ïõî 19Ïùº)
const startDate = new Date('2024-08-19');

// Ï£ºÏ∞® Í≥ÑÏÇ∞ Ìï®Ïàò
function calculateWeeksPassed() {
    const today = new Date();
    return Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000)) + 1;
}

// Ìï¥Îãπ Ï£ºÏ∞®Ïùò ÎÇ†Ïßú Î≤îÏúÑ Í≥ÑÏÇ∞ Ìï®Ïàò
function getWeekDateRange(weekNumber) {
    const weekStartDate = new Date(startDate.getTime() + (weekNumber - 1) * 7 * 24 * 60 * 60 * 1000);
    const weekEndDate = new Date(weekStartDate.getTime() + 6 * 24 * 60 * 60 * 1000);

    const options = { month: 'numeric', day: 'numeric' };
    const start = weekStartDate.toLocaleDateString('ko-KR', options);
    const end = weekEndDate.toLocaleDateString('ko-KR', options);

    return ${start}Î∂ÄÌÑ∞ ${end}ÍπåÏßÄ;
}

// ÎîîÏä§ÏΩîÎìú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï§ÄÎπÑÎêòÏóàÏùÑ Îïå
client.once('ready', () => {
    console.log(Logged in as ${client.user.tag}!);

    // Ïä§ÏºÄÏ§ÑÎßÅ ÏûëÏóÖ: Îß§Ï£º ÏõîÏöîÏùº 00:00Ïóê Ïã§Ìñâ
    const job = schedule.scheduleJob('0 0 * * 1', () => {
        const weeksPassed = calculateWeeksPassed();
        const dateRange = getWeekDateRange(weeksPassed);

        const guild = client.guilds.cache.get(process.env.GUILD_ID);
        const channel = guild.channels.cache.get(process.env.CHANNEL_ID);

        if (channel) {
            channel.send(Ïù¥Î≤à Ï£ºÎäî Ïä§ÌÑ∞Îîî ${weeksPassed}Ï£ºÏ∞® ÏûÖÎãàÎã§. (${dateRange}) Í≥ÑÏÜçÌï¥ÏÑú Ïó¥Ïã¨Ìûà Ìï¥Î¥ÖÏãúÎã§! üí™);
        }
    });
});

// Î©îÏãúÏßÄ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
client.on('messageCreate', message => {
    if (!message.author.bot) {
        // "Ïä§ÌÑ∞Îîî"ÎùºÎäî Îã®Ïñ¥Í∞Ä Ìè¨Ìï®Îêú Î©îÏãúÏßÄÎ•º Í∞êÏßÄ
        if (message.content.toLowerCase().includes('Ïä§ÌÑ∞Îîî')) {
            const weeksPassed = calculateWeeksPassed();
            const dateRange = getWeekDateRange(weeksPassed);
            message.channel.send(Ïò§ÎäòÏùÄ Ïä§ÌÑ∞Îîî ${weeksPassed}Ï£ºÏ∞® ÏûÖÎãàÎã§. (${dateRange}) Ïó¥Ïã¨Ìûà Ìï¥Î¥ÖÏãúÎã§!);
        }
    }
});

// ÏÑúÎ≤Ñ ÏãúÏûë
app.listen(port, () => {
    console.log(Server is running on http://localhost:${port});
});

// Î¥á Î°úÍ∑∏Ïù∏
client.login(process.env.DISCORD_TOKEN);