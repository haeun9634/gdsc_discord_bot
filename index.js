import { Client, GatewayIntentBits } from 'discord.js';
import schedule from 'node-schedule';
import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

const app = express();
const port = process.env.PORT || 3000; // HerokuÏùò Ìè¨Ìä∏ ÌôòÍ≤Ω Î≥ÄÏàò ÏÇ¨Ïö©

// OAuth2 Ïù∏Ï¶ù ÏΩúÎ∞± Ï≤òÎ¶¨
app.get('/callback', async (req, res) => {
    const code = req.query.code;

    if (!code) {
        return res.send('No code provided');
    }

    try {
        const response = await axios.post('https://discord.com/api/oauth2/token', new URLSearchParams({
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            grant_type: 'authorization_code',
            code: code,
            redirect_uri: `${process.env.BASE_URL}/callback`,
        }), {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });

        const { access_token } = response.data;
        res.send('Authentication successful! You can close this window.');
    } catch (error) {
        console.error('Error during authentication:', error);
        res.send('Authentication failed.');
    }
});

// ÏãúÏûë ÎÇ†Ïßú ÏÑ§Ï†ï (9Ïõî 16Ïùº)
const startDate = new Date('2024-09-16');

// Î™ÖÏñ∏ Î∞∞Ïó¥
const quotes = [
    "ÏÑ±Í≥µÏùÄ Ïó¥Ïã¨Ìûà ÌïòÎäî ÏÇ¨ÎûåÏùò Í≤ÉÏù¥Îã§. - ÏïåÎ≤ÑÌä∏ ÏïÑÏù∏ÏäàÌÉÄÏù∏",
    "Ìè¨Í∏∞ÌïòÏßÄ ÎßàÏÑ∏Ïöî. ÏßÄÍ∏à Í≥†ÎÇúÏù¥ Ïò§ÌûàÎ†§ ÎãπÏã†ÏùÑ Îçî Í∞ïÌïòÍ≤å Ìï† Í≤ÉÏûÖÎãàÎã§. - Îπå Í≤åÏù¥Ï∏†",
    "Ïã§Ìå®Îäî ÏÑ±Í≥µÏúºÎ°ú Í∞ÄÎäî Ï≤´ Í±∏ÏùåÏûÖÎãàÎã§. - Ìó®Î¶¨ Ìè¨Îìú",
    "Ïò§ÎäòÏùò ÎÖ∏Î†•Ïù¥ ÎÇ¥ÏùºÏùò ÏÑ±Í≥µÏùÑ ÎßåÎì≠ÎãàÎã§. - Î≤§ÏûêÎØº ÌîÑÎû≠ÌÅ¥Î¶∞",
    "ÏÑ±Í≥µÌïòÎ†§Î©¥ Ïã§Ìå®Î•º ÎëêÎ†§ÏõåÌïòÏßÄ ÎßàÏÑ∏Ïöî. - Ïä§Ìã∞Î∏å Ïû°Ïä§",
    "ÏÑ±Í≥µÏùò ÎπÑÎ∞ÄÏùÄ Î™©ÌëúÎ•º ÏÑ§Ï†ïÌïòÎäî Í≤ÉÏûÖÎãàÎã§. - ÎÇòÌè¥Î†àÏò® Ìûê",
    "Îß§Ïùº Ï°∞Í∏àÏî© ÎÇòÏïÑÍ∞ÄÎ©¥ Í≤∞Íµ≠ ÎèÑÎã¨Ìï©ÎãàÎã§. - Î∏åÎ£®Ïä§ Î¶¨",
    "ÏÑ±Í≥µÏùÄ Í≥ÑÏÜçÌïòÎäî ÏÇ¨ÎûåÏùò Í≤ÉÏù¥Îã§. - ÏúàÏä§ÌÑ¥ Ï≤òÏπ†",
    "ÏûêÏã†ÏùÑ ÎØøÏúºÏÑ∏Ïöî. Í∑∏ ÎØøÏùåÏù¥ ÌûòÏù¥ Îê©ÎãàÎã§. - Ïò§ÌîÑÎùº ÏúàÌîÑÎ¶¨",
    "Ïã§Ìå®Îäî ÎÅùÏù¥ ÏïÑÎãàÎùº ÏÉàÎ°úÏö¥ ÏãúÏûëÏûÖÎãàÎã§. - Ï°¥ Î°ùÌé†Îü¨"
];

// ÌòÑÏû¨ Ï£ºÏ∞®Ïóê ÎßûÎäî Î™ÖÏñ∏ÏùÑ ÏÑ†ÌÉùÌïòÎäî Ìï®Ïàò
function getWeeklyQuote(weekNumber) {
    const quoteIndex = (weekNumber - 1) % quotes.length; // 10Í∞úÏùò Î™ÖÏñ∏ ÏàúÌôò
    return quotes[quoteIndex];
}

// Ï£ºÏ∞® Í≥ÑÏÇ∞ Ìï®Ïàò
function calculateWeeksPassed() {
    const today = new Date();
    return Math.floor((today - startDate) / (7 * 24 * 60 * 60 * 1000)) + 1;
}

// Ìï¥Îãπ Ï£ºÏ∞®Ïùò ÎÇ†Ïßú Î≤îÏúÑ Í≥ÑÏÇ∞ Ìï®Ïàò
function getWeekDateRange(weekNumber) {
    const weekStartDate = new Date(startDate.getTime() + (weekNumber - 1) * 7 * 24 * 60 * 60 * 1000);
    const weekEndDate = new Date(weekStartDate.getTime() + 6 * 24 * 60 * 60 * 1000);

    const options = { month: 'numeric', day: 'numeric' };
    const start = weekStartDate.toLocaleDateString('ko-KR', options);
    const end = weekEndDate.toLocaleDateString('ko-KR', options);

    return `${start}Î∂ÄÌÑ∞ ${end}ÍπåÏßÄ`;
}

// ÎîîÏä§ÏΩîÎìú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï§ÄÎπÑÎêòÏóàÏùÑ Îïå
client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

// Îß§Ï£º ÏõîÏöîÏùº ÏûêÏ†ïÏóê ÏûëÏóÖÏùÑ ÏàòÌñâÌïòÎäî ÏóîÎìúÌè¨Ïù∏Ìä∏
app.get('/execute', (req, res) => {
    const now = new Date();
    const koreanTimeOffset = 9 * 60 * 60 * 1000; // ÌïúÍµ≠ÏùÄ UTC+9
    const koreanTime = new Date(now.getTime() + koreanTimeOffset);

    const dayOfWeek = koreanTime.getDay(); // 0: ÏùºÏöîÏùº, 1: ÏõîÏöîÏùº, ..., 6: ÌÜ†ÏöîÏùº

    if (dayOfWeek === 1) { // ÏõîÏöîÏùºÏùº Îïå
        console.log("Îß§Ï£º ÏõîÏöîÏùº ÏûêÏ†ï Ïã§Ìñâ Ï§ë...");
        const weeksPassed = calculateWeeksPassed();
        const dateRange = getWeekDateRange(weeksPassed);
        const weeklyQuote = getWeeklyQuote(weeksPassed); // Ï£ºÏ∞®Î≥Ñ Î™ÖÏñ∏ Í∞ÄÏ†∏Ïò§Í∏∞

        const guild = client.guilds.cache.get(process.env.GUILD_ID);
        const channel = guild.channels.cache.get(process.env.CHANNEL_ID);

        if (channel) {
            console.log("Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº Ï±ÑÎÑê Î∞úÍ≤¨!");
            
            channel.send(`Ïù¥Î≤à Ï£ºÎäî Ïä§ÌÑ∞Îîî ${weeksPassed}Ï£ºÏ∞® ÏûÖÎãàÎã§! (${dateRange}) üöÄ\n"${weeklyQuote}" \nÏù¥Î≤à Ï£ºÎèÑ Ïó¥Ïã¨Ìûà Îã¨Î†§Î¥ÖÏãúÎã§! üî•`);
        } else {
            console.log("Î©îÏãúÏßÄÎ•º Î≥¥ÎÇº Ï±ÑÎÑêÏùÑ Ï∞æÏßÄ Î™ªÌï®.");
        }
    }
});


// ÏÑúÎ≤Ñ ÏãúÏûë
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});

// Î¥á Î°úÍ∑∏Ïù∏
client.login(process.env.DISCORD_TOKEN);
